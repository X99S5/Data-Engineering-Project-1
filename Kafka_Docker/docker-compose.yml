version: '3'




services:
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      
  
  kafka1:
    image: wurstmeister/kafka
    container_name: kafka1
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181    
      KAFKA_LISTENERS: INTERNAL1://kafka1:29092, CLIENT1://localhost:9092           #Defines the ips that are listening in for connections
      KAFKA_ADVERTISED_LISTENERS: INTERNAL1://kafka1:29092, CLIENT1://localhost:9092  #Defines the ips that are advertised for external clients to connect to , NOTE: you need to put even the internal listener here even if it makes no sense why it is defined as an external when it is going to be used as an internal.
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL1:PLAINTEXT,CLIENT1:PLAINTEXT   
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL1                                 #Defines the Listener used for internal communication within the cluster.
      #KAFKA_BOOTSTRAP_SERVERS: localhost:9092  
     
  kafka2:
    image: wurstmeister/kafka
    container_name: kafka2
    ports:
      - "9093:9093"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181    
      KAFKA_LISTENERS: INTERNAL2://kafka2:29093, CLIENT2://localhost:9093           
      KAFKA_ADVERTISED_LISTENERS: INTERNAL2://kafka2:29093, CLIENT2://localhost:9093    
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL2:PLAINTEXT,CLIENT2:PLAINTEXT   
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL2
      KAFKA_CREATE_TOPICS: "topic_a"
      #KAFKA_BOOTSTRAP_SERVERS: INTERNAL1://kafka1:29092                               
        
  # kafka3:
  #   image: wurstmeister/kafka
  #   container_name: kafka3
  #   ports:
  #     - "9094:9094"
  #   depends_on:
  #     - zookeeper
  #   environment:
  #     KAFKA_BROKER_ID: 3
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181    
  #     KAFKA_LISTENERS: INTERNAL3://kafka3:29094, CLIENT3://localhost:9094           
  #     KAFKA_ADVERTISED_LISTENERS: INTERNAL3://kafka3:29094, CLIENT3://localhost:9094 
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL3:PLAINTEXT,CLIENT3:PLAINTEXT   
  #     KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL3                       


# opt/kafka_2.13-2.8.1/bin/kafka-topics.sh --create --topic topic_a --bootstrap-server kafka1:29092 --partitions 1 --replication-factor 1
# opt/kafka_2.13-2.8.1/bin/kafka-topics.sh --create --topic topic_brr --bootstrap-server localhost:9092 --partitions 1 --replication-factor 1
# bin/kafka-topics.sh --create --topic topic_c --partitions 1 --replication-factor 1
# bin/kafka-topics.sh --create --topic topic_brr --bootstrap-server localhost:9093 --partitions 1 --replication-factor 1

#====================================Start a producer on kafka1 and consumer on kafka2=====================================================
# opt/kafka_2.13-2.8.1/bin/kafka-topics.sh --create --topic topic_a --bootstrap-server kafka2:29093 --partitions 1 --replication-factor 1                   on kafka 2
# opt/kafka_2.13-2.8.1/bin/kafka-console-consumer.sh --bootstrap-server kafka1:29092 --topic topic_a                                                        on kafka 2
# opt/kafka_2.13-2.8.1/bin/kafka-console-producer.sh --broker-list kafka1:29092,kafka2:29093 --topic topic_a                                                on kafka 1
# opt/kafka_2.13-2.8.1/bin/kafka-topics.sh --list --bootstrap-server kafka1:29092



